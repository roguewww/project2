This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-11-24T08:35:18.915Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
public/
  scene.glb
  vite.svg
.gitattributes
.gitignore
counter.js
index.html
input-handler.js
javascript.svg
main.js
package.json
style.css
test.glb
test.js

================================================================
Repository Files
================================================================

================
File: public/scene.glb
================
version https://git-lfs.github.com/spec/v1
oid sha256:62aaf22c1f160de40aed36662f258b900296c25f8a1c1825448598a395ec08e5
size 558633708

================
File: public/vite.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>

================
File: .gitattributes
================
*.glb filter=lfs diff=lfs merge=lfs -text

================
File: .gitignore
================
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

================
File: counter.js
================
export function setupCounter(element) {
  let counter = 0
  const setCounter = (count) => {
    counter = count
    element.innerHTML = `count is ${counter}`
  }
  element.addEventListener('click', () => setCounter(counter + 1))
  setCounter(0)
}

================
File: index.html
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Three.js Example</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <div class="controls" style="display:none">
        <button id="pos-x-increase-button">Move X+</button>
        <button id="pos-y-increase-button">Move Y+</button>
        <button id="pos-z-increase-button">Move Z+</button>
        <button id="rot-x-increase-button">Rotate X+</button>
        <button id="rot-y-increase-button">Rotate Y+</button>
        <button id="rot-z-increase-button">Rotate Z+</button>
        <button id="pos-x-decrease-button">Move X-</button>
        <button id="pos-y-decrease-button">Move Y-</button>
        <button id="pos-z-decrease-button">Move Z-</button>
        <button id="rot-x-decrease-button">Rotate X-</button>
        <button id="rot-y-decrease-button">Rotate Y-</button>
        <button id="rot-z-decrease-button">Rotate Z-</button>
        <div class="camera-info">
            <p id="camera-position">Position: </p >
            <p id="camera-rotation">Rotation: </p >
        </div>
    </div>
    <div class="input">
        <label for="user-input">Enter some text:</label>
        <input type="text" id="user-input" name="user-input">
        <button id="submit-button">Start Voice Recognition</button>
    </div>

    <!-- <div id="loading" style="display:none; opacity:0;">Loading...</div> 加载动画元素 -->

    <div class="output" id="output" style="display:none; opacity:0;">
        <p id="output-text"></p >
    </div>

    <div class="info-container" id="info-container" style="display:none;">
        <h1>Persimmons</h1>
        <p class="description">the sweet fruit of autumn and winter in China, are known as the "sunshine of fruits."</p >
        <div class="persimmon-images">
        </div>
        <div class="circle"></div>
        <div class="attributes">
            <div class="attribute">
                <h2>Look</h2>
                <p>vibrant orange-red color and round adorable shape<br>they are a delight to the eyes</p >
            </div>
            <div class="attribute">
                <h2>Nutrition</h2>
                <p>They have a unique texture—smooth, delicate sweet but not cloying—and are rich in nutrients including vitamin C, fiber, and antioxidants</p >
            </div>
            <div class="attribute">
                <h2>Taste</h2>
                <p>Each bite is a taste of autumn, bringing the joy of harvest. Crisp and refreshing when eaten fresh, sweet as honey when ripe persimmons can also be made into dried persimmons, persimmon jam, and various other delicacies</p >
            </div>
        </div>
    </div>

    <div class="suibian">
    </div>

    <button id="move-button">move forward</button>

    <script type="module" src="./main.js"></script>
    <script type="module" src="./input-handler.js"></script>
</body>
</html>

================
File: input-handler.js
================
import gsap from "gsap";

document.addEventListener("DOMContentLoaded", function() {
    const inputElement = document.getElementById("user-input");
    const outputElement = document.getElementById("output");
    const outputTextElement = document.getElementById("output-text");
    const loadingElement = document.getElementById("loading");
    const submitButton = document.getElementById("submit-button");

    // 初始化语音识别对象
    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    const recognition = new SpeechRecognition();
    recognition.lang = 'en-US'; // 设置语言
    recognition.interimResults = false; // 不需要临时结果

    function submitInput(inputValue) {
        if (inputValue.trim() !== "") { // Check if the input is not empty
            // 先隐藏输出内容
            gsap.to(outputElement, { duration: 0.5, opacity: 0, display: "none", onComplete: () => {
                // 显示加载动画
                gsap.to(loadingElement, { duration: 0.5, opacity: 1, display: "block" });

                // 模拟加载过程（例如从服务器获取数据）
                setTimeout(() => {
                    // 隐藏加载动画
                    gsap.to(loadingElement, { duration: 0.5, opacity: 0, display: "none" });

                    // 显示输出内容
                    outputTextElement.textContent = inputValue;
                    gsap.to(outputElement, { duration: 1, opacity: 1, display: "block" });

                    // 清空输入框
                    inputElement.value = "";
                }, 2000); // 2秒的加载时间，仅作示例
            }});
        }
    }

    inputElement.addEventListener("keydown", function(event) { // 'keydown' event triggers when a key is pressed
        if (event.key === "Enter") { // Check if the key pressed is 'Enter'
            submitInput(inputElement.value);
        }
    });

    submitButton.addEventListener("click", function() {
        // 启动语音识别
        recognition.start();
    });

    recognition.addEventListener("result", function(event) {
        const transcript = event.results[0][0].transcript;
        submitInput(transcript);
    });

    recognition.addEventListener("end", function() {
        console.log("Speech recognition service disconnected");
    });

    recognition.addEventListener("error", function(event) {
        console.error("Speech recognition error detected: " + event.error);
        alert("Speech recognition error: " + event.error);
    });
});

================
File: javascript.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="32" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 256"><path fill="#F7DF1E" d="M0 0h256v256H0V0Z"></path><path d="m67.312 213.932l19.59-11.856c3.78 6.701 7.218 12.371 15.465 12.371c7.905 0 12.89-3.092 12.89-15.12v-81.798h24.057v82.138c0 24.917-14.606 36.259-35.916 36.259c-19.245 0-30.416-9.967-36.087-21.996m85.07-2.576l19.588-11.341c5.157 8.421 11.859 14.607 23.715 14.607c9.969 0 16.325-4.984 16.325-11.858c0-8.248-6.53-11.17-17.528-15.98l-6.013-2.58c-17.357-7.387-28.87-16.667-28.87-36.257c0-18.044 13.747-31.792 35.228-31.792c15.294 0 26.292 5.328 34.196 19.247l-18.732 12.03c-4.125-7.389-8.591-10.31-15.465-10.31c-7.046 0-11.514 4.468-11.514 10.31c0 7.217 4.468 10.14 14.778 14.608l6.014 2.577c20.45 8.765 31.963 17.7 31.963 37.804c0 21.654-17.012 33.51-39.867 33.51c-22.339 0-36.774-10.654-43.819-24.574"></path></svg>

================
File: main.js
================
import * as THREE from "three";
import { GLTFLoader } from "three/examples/jsm/loaders/GLTFLoader.js";
import { EffectComposer } from "three/examples/jsm/postprocessing/EffectComposer.js";
import { RenderPass } from "three/examples/jsm/postprocessing/RenderPass.js";
import { ShaderPass } from "three/examples/jsm/postprocessing/ShaderPass.js";
import { FXAAShader } from "three/examples/jsm/shaders/FXAAShader.js";
import { OrbitControls } from "three/examples/jsm/controls/OrbitControls.js";
import { UnrealBloomPass } from "three/examples/jsm/postprocessing/UnrealBloomPass.js";
import { GammaCorrectionShader } from "three/examples/jsm/shaders/GammaCorrectionShader.js";
import { gsap } from "gsap";

let scene, camera, renderer, composer, model, controls, raycaster, mouse;
const objects = [];
let lastCameraPosition = new THREE.Vector3();

init();
animate();

function init() {
  const container = document.createElement("div");
  container.className = "three-container";
  document.body.appendChild(container);

  // Scene
  scene = new THREE.Scene();

  // Renderer
  renderer = new THREE.WebGLRenderer({ antialias: true });
  renderer.setSize(window.innerWidth, window.innerHeight);
  renderer.setPixelRatio(window.devicePixelRatio);
  renderer.shadowMap.enabled = true; // 启用阴影
  renderer.shadowMap.type = THREE.PCFSoftShadowMap; // 使用柔和阴影
  renderer.toneMapping = THREE.ReinhardToneMapping; // 设置色调映射
  renderer.toneMappingExposure = 10; // 增加曝光
  renderer.outputEncoding = THREE.sRGBEncoding;
  container.appendChild(renderer.domElement);

  // Camera
  camera = new THREE.PerspectiveCamera(
    50,
    window.innerWidth / window.innerHeight,
    0.1,
    2000
  );
  camera.position.set(0.04, 9.03, 64.47);
  camera.rotation.set(0, 12.54, 0);
  lastCameraPosition.copy(camera.position);

  // Raycaster
  raycaster = new THREE.Raycaster();
  mouse = new THREE.Vector2();

  // Load GLB model
  const loader = new GLTFLoader();
  loader.load(
    "scene.glb",
    function (gltf) {
      model = gltf.scene;
      model.traverse((child) => {
        if (child.isMesh) {
          console.log(child.name); // 输出模型名称到控制台
          child.castShadow = true;
          child.receiveShadow = true;
          objects.push(child); // Add mesh to objects array

          if (child.material) {
            child.material.roughness = 0.1;
            child.material.metalness = 0.1;
            child.material.emissiveIntensity = 0.5; // 根据需要调整
          }
        }
      });
      scene.add(model);
    },
    undefined,
    function (error) {
      console.error(error);
    }
  );

  // Postprocessing
  composer = new EffectComposer(renderer);

  // Render pass
  const renderPass = new RenderPass(scene, camera);
  composer.addPass(renderPass);

  // Unreal Bloom pass
  const bloomPass = new UnrealBloomPass(
    new THREE.Vector2(window.innerWidth, window.innerHeight),
    0.2, 0.4, 0.85
  );
  bloomPass.threshold = 0;
  bloomPass.strength = 0.2;
  bloomPass.radius = 0;
  composer.addPass(bloomPass);

  // Gamma correction pass
  const gammaCorrectionPass = new ShaderPass(GammaCorrectionShader);
  composer.addPass(gammaCorrectionPass);

  // FXAA pass
  const fxaaPass = new ShaderPass(FXAAShader);
  const pixelRatio = renderer.getPixelRatio();
  fxaaPass.material.uniforms["resolution"].value.x =
    1 / (window.innerWidth * pixelRatio);
  fxaaPass.material.uniforms["resolution"].value.y =
    1 / (window.innerHeight * pixelRatio);
  composer.addPass(fxaaPass);

  // Handle window resize
  window.addEventListener("resize", onWindowResize, false);

  // Mouse click event listener
  window.addEventListener("click", onMouseClick, false);

  // Move camera on button click
  const moveButton = document.getElementById("move-button");
  moveButton.addEventListener("click", onMoveButtonClick);
}

function onWindowResize() {
  camera.aspect = window.innerWidth / window.innerHeight;
  camera.updateProjectionMatrix();

  renderer.setSize(window.innerWidth, window.innerHeight);
  composer.setSize(window.innerWidth, window.innerHeight);
}

function onMouseClick(event) {
  // Normalize mouse coordinates to [-1, 1]
  mouse.x = (event.clientX / window.innerWidth) * 2 - 1;
  mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;

  // Update the picking ray with the camera and mouse position
  raycaster.setFromCamera(mouse, camera);

  // Calculate objects intersecting the picking ray
  const intersects = raycaster.intersectObjects(objects);

  if (intersects.length > 0) {
    const intersectedObject = intersects[0].object;
    console.log(intersectedObject.name); // 输出被点击对象的名称
    // Check if the clicked object is the specific model
  }
}

function onMoveButtonClick() {
  gsap.to(camera.position, {
    duration: 2,
    x: 0.04, // 设置新的x位置
    y: 9.03, // 设置新的y位置
    z: 30, // 设置新的z位置
    onUpdate: function() {
      // camera.lookAt(scene.position);
    },
    onComplete: function() {
      lastCameraPosition.copy(camera.position);
    }
  });
}

function animate() {
  requestAnimationFrame(animate);
  if (!camera.position.equals(lastCameraPosition)) {
    updateMaterials();
    lastCameraPosition.copy(camera.position);
  }

  // Render scene with composer
  composer.render();
}

function updateMaterials() {
  objects.forEach((child) => {
    if (child.material) {
      child.material.needsUpdate = true;
    }
  });
}

================
File: package.json
================
{
  "name": "project2",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview"
  },
  "devDependencies": {
    "vite": "^5.3.1"
  },
  "dependencies": {
    "gsap": "^3.12.5",
    "three": "^0.166.1"
  }
}

================
File: style.css
================
body {
  margin: 0;
}
canvas {
  display: block;
}


.three-container{
  position: absolute;
  top:0;
  left:0;
  z-index:-1;
}
.controls {
  position: absolute;
  top: 0px;
  left: 0px;
  background: rgba(255, 255, 255, 0.8);
  padding: 10px;
  border-radius: 5px;
  z-index:3;
}
.camera-info {
  margin-top: 10px;
}
button {
  display: block;
  margin-bottom: 5px;
}

.info-container {
  /* background-color: #fff; */
  position: absolute;
  left:20%;
  background: transparent no-repeat;
  background-size: contain;
  background-image: url(bg.jpg);
  border-radius: 7px;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
  overflow: hidden;
  width: 700px;
  height: auto;
  padding: 20px;
  margin-top: 100px;
  position: relative;
  text-align: right;
  z-index: 2;
  /* stroke: 1px; */
}
.container h1 {
  font-family: "Ultra", serif;
  font-size: 36px;
  color: #333;
  margin: 0;
}
.container .description {
  font-size: 16px;
  color: #666;
  margin: 10px 0;
}
.persimmon-images {
  display: flex;
  justify-content: center;
  margin: 20px 0;
  position: relative;
}
.persimmon-images img {
  width: 150px;
  height: 150px;
  border-radius: 50%;
  margin: 0 10px;
}

.attributes {
  margin: 20px 0;
}
.attribute {
  text-align: right;
  margin-bottom: 20px;
}
.attribute h2 {
  font-family: "Ultra", serif;
  font-size: 20px;
  color: #333;
  margin-bottom: 10px;
  display: inline-block;
  background-color: #ffa500;
  padding: 5px 10px;
  border-radius: 5px;
}
.attribute p {
  color: #413f39;

  text-align: right;
  font-family: "Roboto Mono", monospace;
  font-size: 14px;
  font-style: normal;
  font-weight: 400;
  line-height: 131%;
  /* font-size: 14px;
          color: #666; */
}

.description {
  color: #413f39;

  text-align: right;
  font-family: "Roboto Mono", monospace;
  font-size: 14px;
  font-style: normal;
  font-weight: 400;
  line-height: 131%;
  /* font-size: 14px;
          color: #666; */
}

================
File: test.glb
================
version https://git-lfs.github.com/spec/v1
oid sha256:a2175acc1cf2d5ee1d0db9cb1f40312116fde0815dc15c02db2cf6be983c7fbd
size 558637728

================
File: test.js
================
import * as THREE from 'three';
import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';
import { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer.js';
import { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass.js';
import { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass.js';
import { FXAAShader } from 'three/examples/jsm/shaders/FXAAShader.js';
import { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass.js';
import { GammaCorrectionShader } from 'three/examples/jsm/shaders/GammaCorrectionShader.js';


let scene, camera, renderer, composer, model, raycaster, mouse;
const objects = [];

init();
animate();

function init() {
  const container = document.createElement('div');
  container.className = 'three-container';
  document.body.appendChild(container);

  // Scene
  scene = new THREE.Scene();

  // Grid Helper
  const gridHelper = new THREE.GridHelper(100, 100); // 参数分别是大小和步数
  scene.add(gridHelper);

  // Renderer
  renderer = new THREE.WebGLRenderer({ antialias: true });
  renderer.setSize(window.innerWidth, window.innerHeight);
  // renderer.setPixelRatio(window.devicePixelRatio);
  renderer.shadowMap.enabled = true; // 启用阴影
  renderer.shadowMap.type = THREE.PCFSoftShadowMap; // 使用柔和阴影
  renderer.toneMapping = THREE.ReinhardToneMapping; // 设置色调映射
  renderer.toneMappingExposure = 1; // 增加曝光
  renderer.outputEncoding = THREE.sRGBEncoding;
  container.appendChild(renderer.domElement);

  // Camera
  camera = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 0.1, 2000);
  camera.position.set(0.04, 9.03, 11.47);
  camera.rotation.set(0, 12.54, 0);

  // Raycaster
  raycaster = new THREE.Raycaster();
  mouse = new THREE.Vector2();

  // Load GLB model
  const loader = new GLTFLoader();
  loader.load('test.glb', function(gltf) {
    model = gltf.scene;
    model.traverse((child) => {
      if (child.isMesh) {
        console.log(child.name); // 输出模型名称到控制台
        child.castShadow = true;
        child.receiveShadow = true;
        objects.push(child); // Add mesh to objects array
      }
    });
   
    scene.add(model);
  }, undefined, function(error) {
    console.error(error);
  });

  // Postprocessing
  composer = new EffectComposer(renderer);

  // Render pass
  const renderPass = new RenderPass(scene, camera);
  composer.addPass(renderPass);

  // Gamma correction pass
  const gammaCorrectionPass = new ShaderPass(GammaCorrectionShader);
  composer.addPass(gammaCorrectionPass);

  // FXAA pass
  const fxaaPass = new ShaderPass(FXAAShader);
  const pixelRatio = renderer.getPixelRatio();
  fxaaPass.material.uniforms['resolution'].value.x = 1 / (window.innerWidth * pixelRatio);
  fxaaPass.material.uniforms['resolution'].value.y = 1 / (window.innerHeight * pixelRatio);
  composer.addPass(fxaaPass);

  // Handle window resize
  window.addEventListener('resize', onWindowResize, false);

  // Mouse click event listener
  window.addEventListener('click', onMouseClick, false);

  // Button event listeners
  document.getElementById('pos-x-increase-button').addEventListener('click', () => moveCamera('x', 1));
  document.getElementById('pos-y-increase-button').addEventListener('click', () => moveCamera('y', 1));
  document.getElementById('pos-z-increase-button').addEventListener('click', () => moveCamera('z', 1));
  document.getElementById('rot-x-increase-button').addEventListener('click', () => rotateCamera('x', 10));
  document.getElementById('rot-y-increase-button').addEventListener('click', () => rotateCamera('y', 10));
  document.getElementById('rot-z-increase-button').addEventListener('click', () => rotateCamera('z', 10));

  document.getElementById('pos-x-decrease-button').addEventListener('click', () => moveCamera('x', -1));
  document.getElementById('pos-y-decrease-button').addEventListener('click', () => moveCamera('y', -1));
  document.getElementById('pos-z-decrease-button').addEventListener('click', () => moveCamera('z', -1));
  document.getElementById('rot-x-decrease-button').addEventListener('click', () => rotateCamera('x', -10));
  document.getElementById('rot-y-decrease-button').addEventListener('click', () => rotateCamera('y', -10));
  document.getElementById('rot-z-decrease-button').addEventListener('click', () => rotateCamera('z', -10));

  // Initial update of camera info
  updateCameraInfo();
}

function onWindowResize() {
  camera.aspect = window.innerWidth / window.innerHeight;
  camera.updateProjectionMatrix();

  renderer.setSize(window.innerWidth, window.innerHeight);
  composer.setSize(window.innerWidth, window.innerHeight);
}

function onMouseClick(event) {
  // Normalize mouse coordinates to [-1, 1]
  mouse.x = (event.clientX / window.innerWidth) * 2 - 1;
  mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;

  // Update the picking ray with the camera and mouse position
  raycaster.setFromCamera(mouse, camera);

  // Calculate objects intersecting the picking ray
  const intersects = raycaster.intersectObjects(objects);

  if (intersects.length > 0) {
    const intersectedObject = intersects[0].object;
    console.log(intersectedObject.name); // 输出被点击对象的名称

    // Check if the clicked object is the specific model
    if (intersectedObject.name === 'zhuozil') {
      const targetPosition = new THREE.Vector3(3.1, 0.78, -0.88); // 设定摄像头的新位置
      
    }
  }
}

function animate() {
  requestAnimationFrame(animate);

  // Render scene with composer
  composer.render();

  // Update camera info javascript
  updateCameraInfo();
}

function moveCamera(axis, amount) {
  camera.position[axis] += amount;
  updateCameraInfo();
}

function rotateCamera(axis, degrees) {
  camera.rotation[axis] += THREE.MathUtils.degToRad(degrees);
  updateCameraInfo();
}

function updateCameraInfo() {
  const position = camera.position;
  const rotation = camera.rotation;
  document.getElementById('camera-position').innerText = `Position: x=${position.x.toFixed(2)}, y=${position.y.toFixed(2)}, z=${position.z.toFixed(2)}`;
  document.getElementById('camera-rotation').innerText = `Rotation: x=${rotation.x.toFixed(2)}, y=${rotation.y.toFixed(2)}, z=${rotation.z.toFixed(2)}`;
}
